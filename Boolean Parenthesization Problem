
// Boolean Parenthesization Problem | Dynamic Programming
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;
class Solution
{
	
    public static void main(String args[] ) throws Exception 
    {
    	
    	char[] symbols = {'T', 'T', 'F','T'};
        char operators[] = {'|', '&', '^'};
        int n = symbols.length;
     
        // There are 4 ways
        // ((T|T)&(F^T)), (T|(T&(F^T))), (((T|T)&F)^T) and (T|((T&F)^T))
        System.out.println(countParenth(symbols, operators, n));
    	
    }
    
    static  int countParenth(char symb[], char oper[], int n)
    {
    	int T[][] = new int[n][n];
    	int F[][] = new int[n][n];
    	
    	for (int i = 0; i < n; i++) 
    	{
    		T[i][i] = (symb[i] == 'T')?1:0;
    		F[i][i] = (symb[i] == 'F')?1:0;
    	}
    	
    	
    	for (int gap = 1; gap < n; gap++)
    	{
			for (int i = 0, j=gap; j < n; i++,j++) 
			{
				for (int j2 = 0; j2 < gap; j2++) 
				{
					int k = i+j2;
					int tik = T[i][k] + F[i][k];
					int tkj = T[k+1][j] + F[k+1][j];
					
					if(oper[k] == '&')
					{
						T[i][j] += ( T[i][k] * T[k+1][j] );
						F[i][j] += ( tik * tkj - T[i][k] * T[k+1][j] );
					}
					if(oper[k] == '|')
					{
						T[i][j] += ( tik * tkj - F[i][k] * F[k+1][j]);
						F[i][j] += ( F[i][k] * F[k+1][j] );
					}
					if(oper[k] == '^')
					{
						T[i][j] += ( T[i][k] * F[k+1][j] + F[i][k] * T[k+1][j] );
						F[i][j] += ( T[i][k] * T[k+1][j] + F[i][k] * F[k+1][j] );
					}
				}
			}
		}
    	
    	return T[0][n-1];
    }
}
